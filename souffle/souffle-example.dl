// Declarations
.decl siblings(X: symbol, Y: symbol)
.decl parent(X: symbol, Y: symbol)
.decl sameFather(X: symbol, Y: symbol)
.decl samePerson(X: symbol, Y: symbol)
.decl person(X: symbol).
.decl mother(X: symbol, Y: symbol).
.decl father(X: symbol, Y: symbol).
.decl halfSiblings(X: symbol, Y: symbol)
.decl sameMother(X: symbol, Y: symbol)
.decl occupation(X: symbol, Y: symbol).

// Facts
person("Anna").
person("Bob").
person("David").
person("Lia").
person("Maria").
person("Richard").
person("Natalie").
person("John").
father("Anna", "Richard").
father("Bob", "Richard").
mother("Anna", "Lia").
mother("Bob", "Natalie").
father("Richard", "David").
father("John", "David").
mother("John", "Maria").
mother("Richard", "Maria").
occupation("Anna", "Professor").
occupation("Bob", "Professor").
occupation("David", "Musician").
occupation("Lia", "Doctor").
occupation("Maria", "Lawyer").
occupation("Richard", "Manager").
occupation("Natalie", "Doctor").
occupation("John", "Architect").

// Rules
samePerson(X, X) :- person(X).
parent(X, Y) :- mother(X, Y).
parent(X, Y) :- father(X, Y).
sameMother(X, Y) :- mother(X, Z), mother(Y, Z), !samePerson(X, Y).
sameFather(X, Y) :- father(X, Z), father(Y, Z), !samePerson(X, Y).
siblings(X, Y) :- sameMother(X, Y), sameFather(X, Y).
halfSiblings(X, Y) :- sameMother(X, Y), !sameFather(X, Y).
halfSiblings(X, Y) :- !sameMother(X, Y), sameFather(X, Y).

// Query
hasChildDoctor(X) :- parent(Y, X), occupation(Y, "Doctor").

