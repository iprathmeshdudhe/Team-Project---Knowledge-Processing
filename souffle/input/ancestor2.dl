// data as facts
.decl father(X: symbol, Y:symbol)
.decl mother(X: symbol, Y:symbol)

father("Bob", "David").
mother("Bob", "Anna").
father ("Anna", "Richard").
mother("Richard", "Lucy").
father ("Alice", "Bob").
mother("Alice", "Brenda").
father ("Josh", "David").
mother("Josh", "Paula").

// rules
.decl parent(X: symbol, Y:symbol)
parent(X, Y) :- father(X, Y).
parent(X, Y) :- mother(X, Y).
.decl ancestor(X: symbol, Y:symbol)
ancestor(X, Y) :- parent(X, Y).
ancestor(X, Y) :- parent(X, Z), ancestor(Z, Y).

.decl result(Y: symbol)
result(Y) :- ancestor("Alice", Y).

.output result